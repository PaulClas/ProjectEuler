/*
File: main.cpp
Author: Paul Clas
Date: 12 may 2019
Description:
Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include <cmath>
#include <string>
#include <chrono>
#include <vector>

using namespace std;

int main() {
	//auto start = chrono::steady_clock::now();
	long long n, result;
	string answer;
	//Formula  is Xn = n(n+1)/2
	/*bool estFini = false;
	while (estFini == false) {
		cout << "Enter the number of dots for which you would like to know the triangle number: " << endl;
		cin >> n;
		auto start = chrono::steady_clock::now();
		result = n * (n + 1) / 2;
		auto end = chrono::steady_clock::now();
		auto diff = end - start;
		cout << "The triangle number of " << n << " is " << result << " ." << endl;
		cout << chrono::duration <double, milli>(diff).count() << " ms" << endl;
		cout << " Are you done ? y/n" << endl;
		cin >> answer;
		if (answer == "y")
			estFini = true;
	}*/
	// Solving the problem of divisors
	auto start = chrono::steady_clock::now();
	bool IsSolution = false;
	n = 12300;
	vector <int> divisors;
	long int triangleNumb;
	long int numberOfDivisors =0;
	while (IsSolution == false) {
		triangleNumb = n * (n + 1) / 2;
		for (int i = 1; i <= triangleNumb; i++) {
			if (triangleNumb % i == 0) {
				//divisors.push_back(i);
				numberOfDivisors++;
			}
		}
		//cout << triangleNumb << " " << numberOfDivisors << endl;
		if (numberOfDivisors > 500) {
			cout << "The solution is: " << triangleNumb << endl;
			IsSolution = true;
		}
		else {
			n++;
			numberOfDivisors = 0;
		}
		

	}
	auto end = chrono::steady_clock::now();
	auto diff = end - start;
	cout << chrono::duration <double, milli>(diff).count() << " ms" << endl;



	system("Pause");
	return 0;
}